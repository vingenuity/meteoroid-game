
//-----------------------------------------------------------------------------------------------
//	BLOOM CALCULATION
//-----------------------------------------------------------------------------------------------
/* The PS3's graphics hardware cannot index into non-texture arrays.
 * Thus, we are going to calculate Pascal's numbers every time we need them. Ick.
 * This code uses the identity: C(n,k+1) = C(n,k) * (n-k) / (k+1).
 * Thanks, http://stackoverflow.com/questions/15580291/how-to-efficiently-calculate-a-row-in-pascals-triangle! */
float CalculatePascalNumberOnRow( int zeroIndexInRow, int zeroIndexedRowNumber )
{
	//assert( zeroIndexInRow < rowNumber );

	int pascalNumber = 1;
	for( int index = 0; index < zeroIndexedRowNumber; ++index )
	{
		pascalNumber = pascalNumber * ( zeroIndexedRowNumber - index ) / ( index + 1 );
	}
	return float( pascalNumber );
}

//-----------------------------------------------------------------------------------------------
static const float BLOOM_DENOMINATOR = 24.0;
static const int MAX_TEXEL_STEP = 2;
static const float TEXTURE_COORD_STEP_SIZE = 0.003;

float4 CalculateBloomedTexelColorAt( float2 textureCoordinate, sampler2D textureMap )
{
	float4 additiveTexelColor = float4( 0.0, 0.0, 0.0, 0.0 );

	for( int xStep = -MAX_TEXEL_STEP; xStep <= MAX_TEXEL_STEP; ++xStep )
	{
		float xBloomNumerator = CalculatePascalNumberOnRow( xStep + MAX_TEXEL_STEP, 4 );
		for( int yStep = -MAX_TEXEL_STEP; yStep <= MAX_TEXEL_STEP; ++yStep )
		{
			float bloomMultiplier = ( xBloomNumerator * CalculatePascalNumberOnRow( yStep + MAX_TEXEL_STEP, 4 ) ) / BLOOM_DENOMINATOR;
			float2 offsetTextureCoordinate = textureCoordinate + ( float2( xStep , yStep ) * TEXTURE_COORD_STEP_SIZE );

			additiveTexelColor += bloomMultiplier * tex2D( textureMap, offsetTextureCoordinate );
		}
	}
	return additiveTexelColor;
}

//-----------------------------------------------------------------------------------------------
//	MAIN
//-----------------------------------------------------------------------------------------------
void main(	float4				screenPosition		: POSITION0,
			float4				surfaceColor		: COLOR0,
			float2				textureCoordinates	: TEXCOORD0,

			uniform	sampler2D	u_diffuseMap : TEXUNIT0,

			out float4			out_color			: COLOR
		 )
{
	out_color = surfaceColor * ( tex2D( u_diffuseMap, textureCoordinates ) + CalculateBloomedTexelColorAt( textureCoordinates, u_diffuseMap ) );
}